[{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"getting-data","dir":"Articles","previous_headings":"","what":"Getting data","title":"Basic workflow","text":"can get data locally csv SQLite file, remote SQL database server.","code":""},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"local-csv-file","dir":"Articles","previous_headings":"Getting data","what":"Local csv file","title":"Basic workflow","text":"function atl_get_data_csv() convenient wrapper load csv file data frame. default loads csv file provided example data tools4watlas.","code":"data <- atl_get_data_csv()"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"local-sqlite-file","dir":"Articles","previous_headings":"Getting data","what":"Local SQLite file","title":"Basic workflow","text":"First, path file name local SQLite database need provided. , established connection, database can queried particular tags periods.","code":"SQLiteDB = paste0(\"path\", \"SQLite_db_name\", \".sqlite\") MyDBconnection <- RSQLite::dbConnect(RSQLite::SQLite(),SQLiteDB)  data <- atl_get_data(   tag = 31001002707,     tracking_time_start = \"2022-09-02 01:25:00\",     tracking_time_end = \"2022-09-03 13:47:00\",     timezone = \"CET\",     SQLiteDB=SQLiteDB,     use_connection = MyDBconnection )"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"remote-sql-database","dir":"Articles","previous_headings":"Getting data","what":"Remote SQL-database","title":"Basic workflow","text":"also possible connect directly remote host.","code":"data <- atl_get_data(     tag = 31001002707,     tracking_time_start = \"2022-09-02 01:25:00\",     tracking_time_end = \"2022-09-03 13:47:00\",     timezone = \"CET\",     host = \"host\",      database = \"db\",     username = \"username\",     password = \"password\")"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"data-explanation","dir":"Articles","previous_headings":"","what":"Data explanation","title":"Basic workflow","text":"Loading WATLAS data provide data frame different columns representing: PosID = Unique number localizationsTAG = 11 digit WATLAS tag IDtag = 4 digit tag number (character), .e. last 4 digits column ‘TAG’TIME = UNIX time (seconds)time = Timestamp POSIXct (UTC) X = X-ccordinates meters (utm 31 N)Y = Y-ccordinates meters (utm 31 N)NBS = Number Base Stations used calculating coordinatesVARX = Variance estimating X-coordinatesVARY = Variance estimating Y-coordinatesCOVXY = Co-variance X- Y-coordinates","code":""},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"spatiotemporal-filtering","dir":"Articles","previous_headings":"","what":"Spatiotemporal filtering","title":"Basic workflow","text":"getting data, potential first step applying basic filtering select certain areas interest, remove areas erroneous localizations. , example removing hypothesized erroneous localizations rectangular area specified range x y coordinates, spatial polygon also used (see ?atl_filter_bounds). filtering data, general atl_filter_covariates function can also used. example, filtering range coordinates time period:","code":"data <- atl_filter_bounds(     data = data,     x_range = c(639470, 639471),     y_range = c(5887143, 5887144),     sf_polygon = NULL,     remove_inside = TRUE ) data <- atl_filter_covariates(     data = data,     filters = c(     \"between(time, '2022-09-02 01:25:00', '2022-09-03 13:47:00')\",     \"between(X, 649686, 651938)\")  )"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"basic-processing","dir":"Articles","previous_headings":"","what":"Basic processing","title":"Basic workflow","text":"data interest, basic variables can calculated, instance, calculating speeds turning angles consecutive localizations. Speed can later used filtering potentially erroneous localizations.","code":"#> calculate speed between consecutive localizations         data$speed_in <- atl_get_speed(data = data, time = \"TIME\", type = \"in\")  data$speed_out <- atl_get_speed(data = data, time = \"TIME\", type = \"out\")   #> calculate angle between consecutive localizations         data$angle <- atl_turning_angle(data = data, time = \"TIME\")"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"filtering","dir":"Articles","previous_headings":"","what":"Filtering","title":"Basic workflow","text":"next step remove localization errors, instance, applying basic filtering variances estimating x- y-coordinates speed.","code":"VARmax  <- 5000 # variance in meters squared speed_max <- 35 # meters per second  data <- atl_filter_covariates(     data = data,     filters = c(         \"VARX < VARmax\",          \"VARY < VARmax\",         \"speed_in < speed_max\",         \"speed_out < speed_max\"       ) )"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"smoothing","dir":"Articles","previous_headings":"","what":"Smoothing","title":"Basic workflow","text":"reduce error localization data, basic smoother median filter can applied. smoothing data, speeds angles need recalculated.","code":"med_filter <- 5 # window for smoothing localizations data <- atl_median_smooth(data = data, time = \"TIME\", moving_window = med_filter) data$speed_in <- atl_get_speed(data=data, time=\"TIME\", type = \"in\")  data$speed_out <- atl_get_speed(data=data, time=\"TIME\", type = \"out\")   #> Note that the distance between smooted localization can be zero, and  #> therefore, the angle cannot be calculated and a warning and NaNs are returned     data$angle <- atl_turning_angle(data = data, time = \"TIME\")"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"adding-tidal-data","dir":"Articles","previous_headings":"","what":"Adding tidal data","title":"Basic workflow","text":"following basic steps, data ready adding environmental data, waterlevels.","code":"#> load the tidal data using the library data.table tides_filename <- system.file(\"extdata\", \"example_tide_data_UTC.csv\",                                package=\"tools4watlas\") tide_data_highres_filename <- system.file(\"extdata\",                                            \"example_tide_data_highres_UTC.csv\",                                            package = \"tools4watlas\") tides <- data.table::fread(tides_filename) tide_data_highres <- data.table::fread(tide_data_highres_filename)  #> add the tidal data to the tracking data. Note that we use an offset  #> of 30 min becasue of the delay in water flow between the tidal gauge  #> and the location of the example tracking data (the islet of Griend)  data <- atl_add_tidaldata(data = data,                            tide_data = tides,                            tide_data_highres = tide_data_highres,                            waterdata_resolution = \"10 minute\",                            Offset = 30)"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"data-selection","dir":"Articles","previous_headings":"","what":"Data selection","title":"Basic workflow","text":"specific analyses, cleaned data can selected. select localizations mudlfats available foraging, can example select low tide period -2.5 hours +2.5 hours around low tide (Bijleveld et al. 2016):","code":"#> select the low tide periode for a particular tide as specified by tideID  data <- atl_filter_covariates(     data = data,     filters = c(     \"tideID == 2022472\",     \"between(time2lowtide, -2.5 * 60, 2.5 * 60)\") )"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"plotting","dir":"Articles","previous_headings":"","what":"Plotting","title":"Basic workflow","text":"catch potential errors workflow, important always plot intermediate steps. Initially, data data.frame object. plotting, convenient convert spatial object, .e. SpatialPointsDataFrame. plotting region can extended specifiying buffer (meters), scale scalebar (kilometers) can adjusted. inspect localizations, color_by can specified colour localizations time since first localization plot (“time”), standard deviation X- Y-coordinate (“SD”), number base stations used calculating localization (“NBS”). specifiying full path file name (extension) fullname, possible save plot .png. necesarry, legend can also located elsewhere plot Legend. function atl_plot_tag_osm possible plot track satellite image library OpenStreetMap. region satellite image can extended specifiying buffer (meters) function atlas_make_boundingbox_for_osm. options similar atl_plot_tag (see earlier).","code":"#> UTM 31N is the the default coordinate reference system. data_spatial_utm<-atlas_make_spatialdataframe(data)  #> plot locations only sp::plot(data_spatial_utm)   #> Plot the tracking data with a simple background  atl_plot_tag(data=data_spatial_utm, tag=NULL, fullname=NULL, buffer=1,                  color_by=\"time\") #> Obtain the extent of tracking data for retrieving the satellite imagery bbox_utm<-atl_get_spatial_bounds(data_spatial_utm)  #> Transform the bounding box to the osm coordinate reference system Bbox_osm<-atlas_make_boundingbox_for_osm(bbox_utm, buffer=300,                      from_crs= sp::CRS(\"+init=epsg:32631\"))  #> Download the map from OpenStreetMap using the bounding box map <- OpenStreetMap::openmap(Bbox_osm[1,],Bbox_osm[2,],type='bing')  #> Transform tracking data to the osm() coordinate reference system data_spatial_osm<-sp::spTransform(data_spatial_utm, OpenStreetMap::osm()) # to osm()  #> plot the tracking data on the satellite image atl_plot_tag_osm(data=data_spatial_osm, tag=NULL, mapID=map, color_by=\"time\",              fullname=NULL, Scalebar=3)"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"plotting-multiple-individuals","dir":"Articles","previous_headings":"","what":"PLotting multiple individuals","title":"Basic workflow","text":"example combine functions plot one graph selected tags received within given period, make animation.","code":""},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"install-tools4watlas-package-","dir":"Articles","previous_headings":"PLotting multiple individuals","what":"Install tools4watlas package.","title":"Basic workflow","text":"","code":"library(tools4watlas)"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"select-the-time-period-and-tags-of-interest","dir":"Articles","previous_headings":"PLotting multiple individuals","what":"Select the time period and tags of interest","title":"Basic workflow","text":"Set tags time period manually. Alternatively, can also get recent days data server obtain tag metadata Excel-file. Lastly, vector tags need right format.","code":"#> select time period      from=\"2022-09-02 12:00:00\"; to=\"2022-09-02 12:30:00\"      #> set tag numbers and species      tags <- c(2007,2008)     species <- c(\"Red Knot\", \"Red Knot\") #> select number of days to get data for     days<-2     # number of days      from=Sys.time()-86400*days; to=Sys.time() + 3600    # add a buffer at the end     #> using Sys.time() makes vector a \"POSIXct\" that we need to      #> revert back to a character (for now) for using *atl_get_data()*  later      from=as.character(from); to=as.character(to)      #> load Excel file      # provide the correct path and file name, and sheet of the excel file.      library(readxl)     alltags<-as.data.frame(                     readxl::read_excel(                             \"C:\\\\path\\\\tags_watlas.xlsx\",                              sheet=\"tags_watlas\"                             )                         )  #> select tags      # select tags of particular species      tags<-alltags$tag[alltags$species==\"islandica\"] # select islandica red knots     # or provide tag range     tags <- 2007:2008       #> depending on the tag selection, the species need to be taken from the metadata     row_id<-match(tags, alltags$tag)         species<-alltags$species[row_id] #> specify format of tag numbers      tags<-stringr::str_pad(                     as.character(tags),                      4, #> WATLAS tag string is four characters                      pad = \"0\"                     )        # for collecting data from server, long tag format is used     tags_long<-paste0(                 \"3100100\",                  tags)"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"load-tracking-data","dir":"Articles","previous_headings":"PLotting multiple individuals","what":"Load tracking data","title":"Basic workflow","text":"can load data tag -loop, load tagging data list entry dataframe. tracking data obtained local SQLite file. can also use atl_get_data_csv() load csv files, less convenient large files loaded memory simultaneously. Also, data selection timing convenient within SQL-database. SQL-database can hosted locally remotely:","code":""},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"local-sql-database","dir":"Articles","previous_headings":"PLotting multiple individuals > Load tracking data","what":"Local SQL-database","title":"Basic workflow","text":"","code":"#> First, the path and filename of the local SQLite database need to be provided.  SQLiteDB=paste0(\"path\", \"SQLite_db_name\", \".sqlite\") MyDBconnection <- RSQLite::dbConnect(RSQLite::SQLite(),SQLiteDB)  #> Second, with the established connection, the database can be queried  #> for a particular tag and period and written in a list with lapply.  #> Each entry of the list will contain the tracking data for the  #> specified tag and period.  ldf_raw <- lapply(             tags_long,              atl_get_data,              tracking_time_start = from,              tracking_time_end = to,              timezone = \"CET\",              SQLiteDB = mydb,              use_connection = MyDBconnection             )"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"remote-sql-database-1","dir":"Articles","previous_headings":"PLotting multiple individuals > Load tracking data","what":"Remote SQL-database","title":"Basic workflow","text":"","code":"ldf_raw<- lapply(                 tags_long,                  atl_get_data,                 tracking_time_start = from,                 tracking_time_end = to,                 timezone = \"CET\",                 host= \"host\",                  database = \"db\",                 username = \"username\",                 password = \"password\")"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"filtering-and-smoothing-the-data","dir":"Articles","previous_headings":"PLotting multiple individuals","what":"Filtering and Smoothing the data","title":"Basic workflow","text":"Now calculate basic variables like speed filter potentially erroneous localizations. , apply basic filtering variances estimated x- y-coordinates. reduce error localization data, wil lalso apply basic smoother (median filter). examples single tag, see section “Basic workflow” subsection “Basic processing”. also filter individuals minimum number localizations.","code":"#> First, filter potentially erroneous localizations  VARmax  <- 5000 # variance limit in meters squared ldf_clean <- lapply(                 ldf_raw,                  atl_filter_covariates,                 filters = c(                         \"VARX < VARmax\",                          \"VARY < VARmax\"                             )                 )                          #> Second, apply a median smoother  med_filter <- 5 # number of localizations within window for smoothing ldf_smoothed <- lapply(                 ldf_clean,                 atl_median_smooth,                 time = \"TIME\",                  moving_window = med_filter                 )                  #> Third, filter list for minimum number of localizations per bird      min_locs <- 2                   # specify minimum      ldf_n <- lapply(ldf_smoothed, nrow) # count localizations per bird      ldf_n[lengths(ldf_n) == 0] <- 0 # replace NULL counts for 0     n <- unlist(ldf_n)              # create vector of counts     ldf <- ldf_smoothed[n>=min_locs]# filter number of localizations     tags <- tags[n>=min_locs]       # clean tag vector      species<-species[n>=min_locs]   # clean species vector"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"make-data-spatial-and-load-map","dir":"Articles","previous_headings":"PLotting multiple individuals","what":"Make data spatial and load map","title":"Basic workflow","text":"next step make tracking data within list spatial objects, select plotting area based tracking data, load OSM-map plotting.","code":"#> convert to spatial data frames     #> to utm for easy analyses      ldf_utm <- lapply(ldf, atlas_make_spatialdataframe)      #> to osm for easy plotting     ldf_osm <- lapply(ldf_utm, sp::spTransform, OpenStreetMap::osm())           #> get bounding box from utm tracking data     #> for each track     bbox_utm<-lapply(ldf_utm, atl_get_spatial_bounds)      #> get extent of bounding box between tracks     xrange<-range(unlist(lapply(bbox_utm, `[`,,1)))     yrange<-range(unlist(lapply(bbox_utm, `[`,,2)))     bbox_utm<-matrix(cbind(xrange, yrange), nrow = 2, byrow = FALSE,          dimnames = list(c(\"min\", \"max\"), c(\"X\", \"Y\")))          #> Transform the bounding box to the osm coordinate reference system  #> for plotting with OpenStreetMap     bbox_osm <- atlas_make_boundingbox_for_osm(                             bbox_utm,                             buffer=1000,                             from_crs= sp::CRS(\"+init=epsg:32631\")                             )  #> Download the map from OpenStreetMap using the bounding box     map <- OpenStreetMap::openmap(             upperLeft = bbox_osm[1,],             lowerRight = bbox_osm[2,],             type='bing')"},{"path":"https://krietsch.github.io/tools4watlas/articles/basic_workflows.html","id":"plot-multiple-individuals-simultaneously","dir":"Articles","previous_headings":"PLotting multiple individuals","what":"Plot multiple individuals simultaneously","title":"Basic workflow","text":"First, get plotting colours invidiuals species. Second, obtain additional information added plot. case, time range individuals added map. Third, make plot add tracks individuals well additional information like time range, legend scale bar.","code":"#> create colours for different individuals          if(length(unique(species))==1){ #> colour by individual          COL=rainbow(length(ldf_osm))         spec=NULL     }else{  #> or colour by species          spec<-as.data.frame(unique(species))         names(spec)<-\"species\"         #> create colours for the different species          spec$COL<-brewer.pal(nrow(spec), \"Accent\")[1:nrow(spec)]         COL<-spec$COL[match(species, spec$species)]     } #> get time range between birds      timerange <- range(dplyr::combine(lapply(ldf_osm, function(x) range(x$ts)))) #> make plot     plot_map_osm(map)       #> add the timeframe of the underlying tracks      mtext(         paste(timerange[1], \" to \", timerange[2],\" UTC\",  sep=\"\"),          col=\"white\",          line=3,          font=2     )      #> Add all tracks to map from list      mapply(         atl_plot_add_track,          d = ldf_osm,          Pch=19,          Cex=0.4,          Lwd=1,          col = COL,          Type=\"o\",          endpoint=TRUE     )   #> Provide NAMES of the tagged individuals for the legend      NAMES <- NULL   # NULL if there are no names for individuals        #> optionally collect metadata like the Colour Ring Combination (CRC) or #> NAMES from the Excel-file with metadata     CRC <- alltags$crc[match(tags, alltags$tag)]                   NAMES <- alltags$bird_name[match(tags, alltags$tag)]          NAMES[is.na(NAMES)] <- CRC[is.na(NAMES)] # present CRC if NAMES is empty      #> add legend        if(length(unique(species))==1){ #> legend coloured by individual tags         legend(\"topleft\",              c(paste(tags, NAMES, sep=\" \")),              col=c(COL),              pt.bg=c(COL),             pch=c(rep(21,length(COL))),             text.col=\"white\",             cex=0.75,             pt.cex=1.5,             bty = \"n\",             title=paste0(species[1],\" (\", length(tags),\")\"),              title.cex=1.5             )                }else{ #> or else legend coloured by species         legend(             \"topleft\",              spec$species,             col=spec$COL,              pt.bg=spec$COL,             pch=rep(21,length(spec$COL)),             text.col=\"white\",              cex=0.75,             pt.cex=1.5,             bty = \"n\"             )         }              #> add scalebar     fr=0.02 #> custum position of scalebar (in fraction of plot width)      ydiff<-diff(par('usr')[3:4])     xdiff<-diff(par('usr')[1:2])     xy_scale<-c(par('usr')[1]+xdiff*fr, par('usr')[3] + ydiff*fr)     raster::scalebar(         5000, #> length of scale bar in meters         xy_scale,         type='line',          divs=4,          lwd=3,          col=\"white\",          label=\"5 km\"    #> label that goes with the length of scale bar         )"},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"good-to-know","dir":"Articles","previous_headings":"","what":"Good to know","title":"Loading and checking data","text":"tools4watlas based data.table fast efficient. key feature data.table modification place, data changed without making copy. prevent (whenever desired) use function copy() make true copy data set. tools4watlas function run collections lists split() individual (tag ID) keep data separated allow easy parallel computing (necessary).","code":"library(tools4watlas) library(data.table)"},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"getting-data","dir":"Articles","previous_headings":"","what":"Getting data","title":"Loading and checking data","text":"WATLAS data can either loaded local SQLite database rem remote SQL database server. , first select tags time period extract data. Use tags_watlas_all.xlsx file (including metadata tags) collaborators tags_watlas_subset.xlsx (including subset metadata) select desired tags. shown example data tools4watlas. Loading tags_watlas_subset.xlsx provide table following columns:","code":""},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"select-the-desired-tags-and-time-period","dir":"Articles","previous_headings":"Getting data","what":"Select the desired tags and time period","title":"Loading and checking data","text":"","code":"# Load meta data all_tags_path = system.file(\"extdata\", \"tags_watlas_subset.xlsx\",                              package = \"tools4watlas\") all_tags = readxl::read_excel(all_tags_path, sheet = \"tags_watlas_all\") |>   data.table()  # Subset desired tags using data.table  # (For example red knots and redshank from season 2023) tags <- all_tags[season == 2023 &                    species %in% c(\"red knot\", \"redshank\")]$tag  # Time period for which data should be extracted form the database (in CET) from <- \"2023-10-01 12:00:00\" to   <- \"2023-10-02 12:00:00\""},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"extract-data-from-local-sqlite-file","dir":"Articles","previous_headings":"Getting data","what":"Extract data from local SQLite file","title":"Loading and checking data","text":"First, path file name local SQLite database need provided. , established connection, database can queried selected tags period. load tagging data list entry data.frame data one tag.","code":"# Database connection sqlite_db = system.file(\"extdata\", \"watlas_example.SQLite\",                         package = \"tools4watlas\") con <- RSQLite::dbConnect(RSQLite::SQLite(), sqlite_db)  # Load data from database data_split <- lapply(   tags,    atl_get_data,    tracking_time_start = from,    tracking_time_end = to,    timezone = \"CET\",   use_connection = con )   # Close connection RSQLite::dbDisconnect(con)"},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"alternatively-extract-from-remote-sql-database","dir":"Articles","previous_headings":"Getting data","what":"Alternatively, extract from remote SQL-database","title":"Loading and checking data","text":"connecting local SQLite database. example (chunk run shown) load last three days data tags season 2024. Host, database, username password specified.","code":"# Load meta data all_tags_path = \"C:\\\\path\\\\tags_watlas_all.xlsx\" all_tags = readxl::read_excel(all_tags_path, sheet = \"tags_watlas_all\") |>   data.table()  # Subset all tags from 2024 tags <- all_tags[season == 2024]$tagID  # Select N last days to get data from days <- 3 from <- Sys.time() - 86400 * days |> as.character() to   <- Sys.time() + 3600 |> as.character()  # Load data from database data_split  <- lapply(   tags,    atl_get_data,   tracking_time_start = from,   tracking_time_end = to,   timezone = \"CET\",   host = \"host\",    database = \"db\",   username = \"username\",   password = \"password\" )"},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"data-explanation","dir":"Articles","previous_headings":"","what":"Data explanation","title":"Loading and checking data","text":"resulting loaded WATLAS data collection lists split tag. Loading WATLAS data provide data frame different columns representing:","code":"# Show first 5 rows of the first list data_split[[1]][1:5, ] |> knitr::kable(digits = 2)"},{"path":[]},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"data-summary","dir":"Articles","previous_headings":"Check data","what":"Data summary","title":"Loading and checking data","text":"simply check many individuals data many positions tag date . Number positions per day tag","code":"# Bind data into one data.table data <- rbindlist(data_split, fill = TRUE) |> data.table()  # N individuals with tagging data data[, .N, tag] |> nrow() ## [1] 3  # N positions, first and last data by tag ID data[, .(N_positions = .N,          fist_data = min(datetime),          last_data = max(datetime)), tag] ##       tag N_positions           fist_data           last_data ##    <char>       <int>              <POSc>              <POSc> ## 1:   3040        5779 2023-10-01 10:08:39 2023-10-02 09:59:59 ## 2:   3085        3453 2023-10-01 10:00:01 2023-10-02 09:41:16 ## 3:   3086        3548 2023-10-01 10:00:01 2023-10-02 09:59:42  # add data data[, date := as.Date(datetime)] |> invisible()  # N positions by species and day data_subset = data[, .N, by = .(tag, date)]  # Plot data library(ggplot2) library(scales) library(viridis) ## Loading required package: viridisLite ##  ## Attaching package: 'viridis' ## The following object is masked from 'package:scales': ##  ##     viridis_pal   ggplot(data_subset, aes(x = date, y = tag, fill = N)) +   geom_tile() +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),      labels = trans_format(\"log10\", math_format(10^.x)),      direction = -1) +    labs(x = \"Date\", y = \"Tag\") +   theme_classic()"},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"plot-by-tag","dir":"Articles","previous_headings":"Check data","what":"Plot by tag","title":"Loading and checking data","text":"Overview plot tag","code":"# Plot data ggplot(data) +   geom_path(aes(x, y, color = tag), alpha = 0.1) +   geom_point(aes(x, y, color = tag), size = 0.5) +   coord_sf(crs = 32631) +    labs(x = \"\", y = \"\") +   theme_bw()"},{"path":"https://krietsch.github.io/tools4watlas/articles/load_and_check_data.html","id":"heatmap-of-all-positions","dir":"Articles","previous_headings":"Check data","what":"Heatmap of all positions","title":"Loading and checking data","text":"Heatmap positions","code":"# Round data to 200 m grid cells data_heatmap <- copy(data) data_heatmap[, c(\"x_round\", \"y_round\") := list(   plyr::round_any(x, 200),   plyr::round_any(y, 200) )] data_heatmap <- data_heatmap[, .N, by = c(\"x_round\", \"y_round\")]  # Plot heatmap ggplot(data_heatmap) +   geom_tile(aes(x_round, y_round, fill = N), linewidth = 0.1, show.legend = T) +   scale_fill_viridis(     option = \"A\", discrete = FALSE, trans = \"log10\", name = \"N positions\",     breaks = trans_breaks(\"log10\", function(x) 10^x),      labels = trans_format(\"log10\", math_format(10^.x)),      direction = -1) +    coord_sf(crs = 32631) +   labs(x = \"\", y = \"\") +   theme_bw()"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic workflow","title":"Processing data","text":"basic workflow using tools4watlas high-throughput WATLAS tracking-data getting data, basic filtering, processing, cleaning, adding environmental data selecting data. installing package, load tools4watlas library.","code":"library(tools4watlas) library(data.table)"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"getting-data","dir":"Articles","previous_headings":"Basic workflow","what":"Getting data","title":"Processing data","text":"can get data locally csv SQLite file, remote SQL database server.","code":""},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"local-csv-file","dir":"Articles","previous_headings":"Basic workflow > Getting data","what":"Local csv file","title":"Processing data","text":"function atl_get_data_csv() convenient wrapper load csv file data frame. default loads csv file provided example data tools4watlas.","code":"data <- atl_get_data_csv() |>    data.table() #> Reading file: /home/runner/work/_temp/Library/tools4watlas/extdata/redknot_2707_WATLAS_exampledata.csv  # Split data by ID data_split <- split(data, by = \"TAG\")"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"spatiotemporal-filtering","dir":"Articles","previous_headings":"Basic workflow","what":"Spatiotemporal filtering","title":"Processing data","text":"getting data, potential first step applying basic filtering select certain areas interest, remove areas erroneous localizations. , example removing hypothesized erroneous localizations rectangular area specified range x y coordinates, spatial polygon also used (see ?atl_filter_bounds). filtering data, general atl_filter_covariates function can also used. example, filtering range coordinates time period:","code":"# @ALLERT make run on lists? This does not seem to work ldf_filtered <- lapply(   ldf_raw,   atl_filter_bounds,   x_range = c(639470, 639471),   y_range = c(5887143, 5887144),   sf_polygon = NULL,   remove_inside = TRUE ) ldf_filtered <- lapply(   ldf_raw,      atl_filter_covariates,   filters = c(     \"between(time, '2022-09-02 01:25:00', '2022-09-03 13:47:00')\",       \"between(X, 649686, 651938)\"     )    )"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"basic-processing","dir":"Articles","previous_headings":"Basic workflow","what":"Basic processing","title":"Processing data","text":"Transform lists data.tables. data interest, basic variables can calculated, instance, calculating speeds turning angles consecutive localizations. Speed can later used filtering potentially erroneous localizations.","code":"lapply(data_split, setDT) |>    invisible() # calculate SD lapply(data_split, function(dt) {   dt[, SD := sqrt(VARX + VARY + (2 * COVXY))] }) |>    invisible()  # calculate speed lapply(data_split, function(dt) {   dt[, `:=`(     speed_in = atl_get_speed(dt, time = \"TIME\", type = \"in\"),     speed_out = atl_get_speed(dt, time = \"TIME\", type = \"out\")   )] }) |>    invisible()"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"filtering","dir":"Articles","previous_headings":"Basic workflow","what":"Filtering","title":"Processing data","text":"next step remove localization errors, instance, applying basic filtering variances estimating x- y-coordinates speed.","code":"VARmax  <- 5000 # variance in meters squared speed_max <- 35 # meters per second  data_split <- lapply(data_split, function(dt) {   dt <- atl_filter_covariates(     data = dt,     filters = c(       \"VARX < VARmax\",         \"VARY < VARmax\",         \"speed_in < speed_max\",         \"speed_out < speed_max\"     )   ) })"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"smoothing","dir":"Articles","previous_headings":"Basic workflow","what":"Smoothing","title":"Processing data","text":"reduce error localization data, basic smoother median filter can applied. smoothing data, speeds angles need recalculated.","code":"med_filter <- 5 # number of localizations within window for smoothing  # since the function modifies in place, we shall make a copy data_smooth <- copy(data_split)  # make lists data.tables lapply(data_smooth, setDT) |>   invisible()  lapply(   X = data_smooth,   FUN = atl_median_smooth,   time = \"TIME\", moving_window = med_filter ) |>    invisible() lapply(data_smooth, function(dt) {   dt[, `:=`(     speed_in = atl_get_speed(dt, time = \"TIME\", type = \"in\"),     speed_out = atl_get_speed(dt, time = \"TIME\", type = \"out\")   )]   dt[, angle := atl_turning_angle(dt, time = \"TIME\")] }) |>    invisible()"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"adding-tidal-data","dir":"Articles","previous_headings":"Basic workflow","what":"Adding tidal data","title":"Processing data","text":"following basic steps, data ready adding environmental data, waterlevels.","code":"data = rbindlist(data_smooth, fill = TRUE)  # add water level data tides <- system.file(   \"extdata\", \"example_tide_data_UTC.csv\", package = \"tools4watlas\") tide_data_highres <- system.file(   \"extdata\", \"example_tide_data_highres_UTC.csv\", package = \"tools4watlas\"   ) data = as.data.frame(data) data = atl_add_tidaldata(   data = d,   tide_data = tides,    tide_data_highres = tide_data_highres,    waterdata_resolution = \"10 minute\",   Offset = 30)"},{"path":"https://krietsch.github.io/tools4watlas/articles/process_data.html","id":"data-selection","dir":"Articles","previous_headings":"Basic workflow","what":"Data selection","title":"Processing data","text":"specific analyses, cleaned data can selected. select localizations mudlfats available foraging, can example select low tide period -2.5 hours +2.5 hours around low tide (Bijleveld et al. 2016):","code":"# Split data by ID data_split <- split(data, by = \"TAG\")  # Select the low tide period for a particular tide as specified by tideID    data_split <- lapply(data_split, function(dt) {   dt <- atl_filter_covariates(     data = dt,     filters = c(     \"tideID == 2022472\",     \"between(time2lowtide, -2.5 * 60, 2.5 * 60)\"     )   ) })"},{"path":"https://krietsch.github.io/tools4watlas/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Allert Bijleveld. Author, maintainer. Pratik Gupte. Author. Christine Beardsworth. Author.","code":""},{"path":"https://krietsch.github.io/tools4watlas/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bijleveld , Gupte P, Beardsworth C (2024). tools4watlas: Tools Processing WATLAS Tracking Data. R package version 0.99, https://krietsch.github.io/tools4watlas/, https://github.com/allertbijleveld/tools4watlas.","code":"@Manual{,   title = {tools4watlas: Tools for Processing WATLAS Tracking Data},   author = {Allert Bijleveld and Pratik Gupte and Christine Beardsworth},   year = {2024},   note = {R package version 0.99, https://krietsch.github.io/tools4watlas/},   url = {https://github.com/allertbijleveld/tools4watlas}, }"},{"path":"https://krietsch.github.io/tools4watlas/index.html","id":"tools4watlas-","dir":"","previous_headings":"","what":"Tools for Processing WATLAS Tracking Data","title":"Tools for Processing WATLAS Tracking Data","text":"goal tools4watlas provide tools getting, processing plotting WATLAS tracking data. information WATLAS tracking system can found article published Animal Biotelemetry: WATLAS: high-throughput real-time tracking many small birds Dutch Wadden Sea. Visit https://www.nioz.nl/watlas follow tracked birds real time. package tools4watlas builds package atlastools. pipeline coding examples cleaning high-throughput tracking data atlastools presented article Journal Animal Ecology: Guide Pre-processing High-throughput Animal Tracking Data.","code":""},{"path":"https://krietsch.github.io/tools4watlas/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Tools for Processing WATLAS Tracking Data","text":"Basic workflows use tools4watlas can found package website. Vignettes: Basic workflows - Allert’s basic WATLAS data workflow Load check data - Example script load check WATLAS data. Process data - Example script process WATLAS data. TODO: Add enviromental data TODO: WATLAS data summary TODO: Plotting WATLAS data TODO: Animate movement data TODO: Residency patch analysis","code":""},{"path":"https://krietsch.github.io/tools4watlas/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for Processing WATLAS Tracking Data","text":"can install latest version tools4watlas GitHub :","code":"library(remotes) install_github(\"allertbijleveld/tools4watlas\")"},{"path":"https://krietsch.github.io/tools4watlas/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tools for Processing WATLAS Tracking Data","text":"Example track","code":"library(tools4watlas) library(ggplot2)  # Load data from csv file data = atl_get_data_csv() #> Reading file: C:/Users/jkrietsch/AppData/Local/R/win-library/4.4/tools4watlas/extdata/redknot_2707_WATLAS_exampledata.csv  # Plot the tracking data with a simple background  # atl_plot_tag(data = data, tag = NULL, fullname = NULL, buffer = 1,  #              color_by = \"time\")  ggplot(data) +    geom_path(aes(X, Y), alpha = 0.1) +    geom_point(aes(X, Y), size = 0.5) +    theme_bw()"},{"path":"https://krietsch.github.io/tools4watlas/index.html","id":"work-in-progress","dir":"","previous_headings":"","what":"Work in progress","title":"Tools for Processing WATLAS Tracking Data","text":"examples workflows aimed processing, plotting adding environmental data WATLAS tracking data prepared. request, please contact Allert Bijleveld. working following vignettes moment: Add enviromental data WATLAS data summary Plotting WATLAS data Animate movement data Residency patch analysis","code":""},{"path":"https://krietsch.github.io/tools4watlas/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Tools for Processing WATLAS Tracking Data","text":"Many people organisations involved hosting WATLAS equipment, without WATLAS possible. therefore thank Hoogheemraadschap Hollands Noorderkwartier, Koninklijke Nederlandse Redding Maatschappij, Staatsbosbeheer, Marine Eco Analytics, Koninklijke Luchtmacht, Het Posthuys (Vlieland), Natuurmonumenten, Wetterskip Fryslan, Afsluitdijk Wadden Center, Vermilion, Rijkswaterstaat, Carl Zuhorn, Lenze Hofstee Lydia de Loos. thank Natuurmonumenten access Griend using facilities. Also, thank Hein de Vries, Klaas-Jan Daalder, Hendrik-Jan Lokhorst, Bram Fey, Wim-Jan Boon RV Navicula RV Stern, well many NIOZ staff volunteers facilitated work. particularly like thank Anita Koolhaas, Hinke Cornelis Dekinga help building receiver stations. thank Jeras de Jonge, Martin Laan, Sander Asjes, Aris van der Vis technical help, Benjamin Gnep persistently replacing broken LNA’s. Thanks Marten Tacoma visualizing tracking data real time www.nioz.nl/watlas Ingrid de Raad help posting WATLAS-related news. also thank Minerva Foundation Minerva Center Movement Ecology supporting development maintenance ATLAS systems, Yotam Orchan Yoav Bartan valuable technical assistance.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_add_tidaldata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tidal data to tracking data. — atl_add_tidaldata","title":"Add tidal data to tracking data. — atl_add_tidaldata","text":"Adds unique tide identifier, waterlevel, time high tide time low tide tracking data (minutes).","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_add_tidaldata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tidal data to tracking data. — atl_add_tidaldata","text":"","code":"atl_add_tidaldata(   data,   tide_data,   tide_data_highres,   waterdata_resolution = \"10 minute\",   Offset = 0 )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_add_tidaldata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tidal data to tracking data. — atl_add_tidaldata","text":"data dataframe tracking data timestamp column 'time' UTC. tide_data Data timing (UTC) low high tides output function fread package data.table. tide_data_highres Data timing (UTC) waterlevel small intervals (e.g. every 10 min) provided Rijkwaterstaat output function fread package data.table. waterdata_resolution resolution high resolution waterlevel data. used matching high resolution tidal data tracking data. Defaults 10 minutes can set differently. Offset offset minutes location tidal gauge tracking area. value added timing waterdata.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_add_tidaldata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add tidal data to tracking data. — atl_add_tidaldata","text":"input data three columns added: tideID (unique number tidal periode two consecutive high tides), tidaltime (time since high tide minutes), time2lowtide (time low tide minutes), waterlevel reference NAP (cm).","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_add_tidaldata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add tidal data to tracking data. — atl_add_tidaldata","text":"Pratik Gupte & Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_check_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check data has required columns. — atl_check_data","title":"Check data has required columns. — atl_check_data","text":"internal function checks data.table required columns.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_check_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check data has required columns. — atl_check_data","text":"","code":"atl_check_data(data, names_expected = c(\"x\", \"y\", \"time\"))"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_check_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check data has required columns. — atl_check_data","text":"data tracking data check required columns. Must form data.frame similar, can handled function colnames. names_expected names expected character vector. default, checks column names x, y, time.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_check_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check data has required columns. — atl_check_data","text":"None. Breaks data required columns.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_check_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check data has required columns. — atl_check_data","text":"Pratik R. Gupte","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_check_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check data has required columns. — atl_check_data","text":"","code":"# basic (and only) use if (FALSE) { # \\dontrun{ atl_check_data(   data = data,   names_expected = c(\"x\", \"y\", \"time\") ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter positions by an area. — atl_filter_bounds","title":"Filter positions by an area. — atl_filter_bounds","text":"Filters positions lying inside outside area. area can defined two ways, either X Y coordinate ranges, sf-*POLYGON object. MULTIPOLYGON objects supported internal function atl_within_polygon.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter positions by an area. — atl_filter_bounds","text":"","code":"atl_filter_bounds(   data,   x = \"x\",   y = \"y\",   x_range = NA,   y_range = NA,   sf_polygon = NULL,   remove_inside = TRUE )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter positions by an area. — atl_filter_bounds","text":"data dataframe extension contains X Y coordinates. x X coordinate column. y Y coordinate column. x_range range X coordinates. y_range range Y coordinates. sf_polygon sfc_*POLYGON object must defined CRS. polygon CRS assumed appropriate positions well, assigned coordinates determining intersection. remove_inside Whether remove points within range. Setting negate = TRUE removes positions within bounding box specified X Y ranges.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter positions by an area. — atl_filter_bounds","text":"data frame tracking locations attractor points removed.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter positions by an area. — atl_filter_bounds","text":"Pratik R. Gupte","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter positions by an area. — atl_filter_bounds","text":"","code":"if (FALSE) { # \\dontrun{ filtered_data <- atl_filter_bounds(   data = data,   x = \"X\", y = \"Y\",   x_range = c(x_min, x_max),   y_range = c(y_min, y_max),   sf_polygon = your_polygon,   remove_inside = FALSE ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_covariates.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter data by position covariates. — atl_filter_covariates","title":"Filter data by position covariates. — atl_filter_covariates","text":"atlastools function atl_filter_covariates allows convenient filtering dataset number logical filters. function can used easily filter timestamps range, well combine simple spatial temporal filters. accepts character vector R expressions return logical vector (.e., TRUE FALSE). filtering condition interpreted context dataset supplied, used filter rows satisfy filter conditions. Users must make sure filtering variables exist dataset order avoid errors.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter data by position covariates. — atl_filter_covariates","text":"","code":"atl_filter_covariates(data, filters = c())"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter data by position covariates. — atl_filter_covariates","text":"data dataframe similar containing variables filtered. filters character vector filter expressions. example might \"speed < 20\". filtering variables must dataframe. function explicitly check whether filtering variables present; makes flexible, allowing expressions \"(speed, 2, 20)\", also something use risk. missing filter variables result empty data frame.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter data by position covariates. — atl_filter_covariates","text":"dataframe filtered using filters specified.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter data by position covariates. — atl_filter_covariates","text":"Pratik R. Gupte","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_filter_covariates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter data by position covariates. — atl_filter_covariates","text":"","code":"if (FALSE) { # \\dontrun{ night_data <- atl_filter_covariates(   data = dataset,   filters = c(\"!inrange(hour, 6, 18)\") )  data_in_area <- atl_filter_covariates(   data = dataset,   filters = c(     \"between(time, t_min, t_max)\",     \"between(x, x_min, x_max)\"   ) ) filtered_data <- atl_filter_covariates(   data = data,   filters = c(     \"NBS > 3\",     \"SD < 100\",     \"between(day, 5, 8)\"   ) ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_full_tag_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Create full tag ID or tag ID with specific length — atl_full_tag_id","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"Create full tag ID tag ID specific length","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"","code":"atl_full_tag_id(tag, short = FALSE, n = 4)"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"tag Tag number (either numeric character). Maximally provide 6 digits, less work. short TRUE FALSE short long tag ID n short = TRUE, many digits short tag ID ?","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"Full short tag ID character","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"Johannes Krietsch","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_full_tag_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create full tag ID or tag ID with specific length — atl_full_tag_id","text":"","code":"tag = 123 atl_full_tag_id(tag) #> [1] \"31001000123\" atl_full_tag_id(tag, short = TRUE) #> [1] \"0123\""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a SQLite-database. — atl_get_data","title":"Get data from a SQLite-database. — atl_get_data","text":"function can used obtain data local remote SQLite database. full path filename provided 'SQLiteDB', look SQLite-file locally. 'SQLiteDB' NULL establish connection remote server. also functionality use existing opened data base connection can provided 'use_connection'. instance, creating residence patches within loop tags tide ID's. establishing conncection within -loop takes long time, established connection can used.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a SQLite-database. — atl_get_data","text":"","code":"atl_get_data(   tag,   tracking_time_start,   tracking_time_end,   timezone = \"CET\",   database = \"some_database\",   host = \"some.host.nl\",   username = \"someuser\",   password = \"somepassword\",   SQLiteDB = NULL,   use_connection = NULL )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a SQLite-database. — atl_get_data","text":"tag number representing WATLAS tag (either short format e.g. 4 digits long format 11 digits). May passed character numeric, converted character. example \"31001000001\". tracking_time_start Character representation time start-point data retrieved. tracking_time_end Character time representing end point corresponding start point. timezone Timezone tracking_time_start tracking_time_end. Must valid timezone .POSIXct function. database database name host server. host server address data stored. username Username access server. password Password access server. SQLiteDB full path including filename local SQLite-database whith tracking data. argument overrules establishing connection remote host. use_connection R-object previously established connection, instance generated RMySQL::dbConnect(RMySQL::MySQL(),  user = 'username', password = 'password', dbname = 'database',  host = 'host'). argument overrules making connection local host SQLiteDB remote host.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a SQLite-database. — atl_get_data","text":"dataframe localizations specified tag, filtered start end times. posID\t  =\tUnique number localizations  tag\t\t  =\t4 digit tag number (character)  time\t\t  =\tUNIX time (seconds)  datetime = Timestamp POSIXct (UTC)  x\t\t    =\tx-ccordinates meters (UTM 31 N)  y\t\t    =\ty-ccordinates meters (UTM 31 N)  nbs\t\t  =\tNumber Base Stations used calculating coordinates  varx\t\t  =\tVariance estimating x-coordinates  vary\t\t  =\tVariance estimating y-coordinates  covxy\t  =\tCo-variance y- y-coordinates","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get data from a SQLite-database. — atl_get_data","text":"Pratik R. Gupte & Allert . Bijleveld & Johannes Krietsch","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from a local csv file. — atl_get_data_csv","title":"Get data from a local csv file. — atl_get_data_csv","text":"Adjusted version read.csv() conveniently load WATLAS data csv file. read large csv files efficiently, functions uses package data.table output converted data frame.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from a local csv file. — atl_get_data_csv","text":"","code":"atl_get_data_csv(   fpath = system.file(\"extdata\", \"redknot_2707_WATLAS_exampledata.csv\", package =     \"tools4watlas\") )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from a local csv file. — atl_get_data_csv","text":"fpath full path (including path file name) csv file. left empty, example data file supplied tools4watlas used.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get data from a local csv file. — atl_get_data_csv","text":"formatted dataframe csv file columns:  PosID\t=\tUnique number localizations  TAG \t\t=\t11 digit WATLAS tag ID (numeric)  tag\t\t=\t4 digit tag number (character)  TIME\t\t=\tUNIX time (seconds)  time \t= \tTimestamp POSIXct (UTC)  X\t\t=\tX-ccordinates meters (utm 31 N) \t  Y\t\t=\tY-ccordinates meters (utm 31 N) \t  NBS\t\t=\tNumber Base Stations used calculating coordinates   VARX\t\t=\tVariance estimating X-coordinates  VARY\t\t=\tVariance estimating Y-coordinates  COVXY\t=\tCo-variance X- Y-coordinates","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_data_csv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get data from a local csv file. — atl_get_data_csv","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_spatial_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial bounds for dataframe X,Y coordinates. — atl_get_spatial_bounds","title":"Get spatial bounds for dataframe X,Y coordinates. — atl_get_spatial_bounds","text":"Obtains extent (localization) data within dataframe contains coordinates X Y.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_spatial_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial bounds for dataframe X,Y coordinates. — atl_get_spatial_bounds","text":"","code":"atl_get_spatial_bounds(data)"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_spatial_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial bounds for dataframe X,Y coordinates. — atl_get_spatial_bounds","text":"data dataframe tracking data.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_spatial_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial bounds for dataframe X,Y coordinates. — atl_get_spatial_bounds","text":"Provides matrix range X Y coordinates.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_spatial_bounds.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get spatial bounds for dataframe X,Y coordinates. — atl_get_spatial_bounds","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate instantaneous speed. — atl_get_speed","title":"Calculate instantaneous speed. — atl_get_speed","text":"Returns speed metres per time interval. time interval dependent units column specified TIME. Users apply function one individual time, ideally splittng dataframe multiple individuals list dataframes.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate instantaneous speed. — atl_get_speed","text":"","code":"atl_get_speed(data, x = \"x\", y = \"y\", time = \"time\", type = c(\"in\"))"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate instantaneous speed. — atl_get_speed","text":"data dataframe similar must columns specified x, y, time. x x coordinate. y y coordinate. time timestamp seconds since UNIX epoch. type type speed (incoming outgoing) return. Incoming speeds specified type = \"\", outgoing speeds type = \"\".","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate instantaneous speed. — atl_get_speed","text":"vector numerics representing speed. first position assigned speed NA.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_speed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate instantaneous speed. — atl_get_speed","text":"Pratik R. Gupte & Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_get_speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate instantaneous speed. — atl_get_speed","text":"","code":"if (FALSE) { # \\dontrun{ data$speed_in <- atl_get_speed(data,   x = \"x\", y = \"y\",   time = \"time\", type = c(\"in\") ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_median_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a median smooth to coordinates. — atl_median_smooth","title":"Apply a median smooth to coordinates. — atl_median_smooth","text":"Applies median smooth defined rolling window X Y coordinates data.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_median_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a median smooth to coordinates. — atl_median_smooth","text":"","code":"atl_median_smooth(data, x = \"x\", y = \"y\", time = \"time\", moving_window = 5)"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_median_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a median smooth to coordinates. — atl_median_smooth","text":"data dataframe object returned atl_get_data, contain original columns (particularly X,Y TIME). x X coordinate. y Y coordinate. time timestamp, ideally integer. moving_window size moving window median smooth. Must odd number.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_median_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a median smooth to coordinates. — atl_median_smooth","text":"datatable class object (extends data.frame), including X,Y smoothed coordinates x_raw y_raw, raw coordinates.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_median_smooth.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Apply a median smooth to coordinates. — atl_median_smooth","text":"Pratik Gupte & Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_median_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a median smooth to coordinates. — atl_median_smooth","text":"","code":"if (FALSE) { # \\dontrun{ atl_median_smooth(   data = track_data,   x = \"x\", y = \"y\",   time = \"time\",   moving_window = 5 ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the distance between patches. — atl_patch_dist","title":"Get the distance between patches. — atl_patch_dist","text":"Gets linear distance first point patch last point previous patch patch - 1. Distance returned metres. function used internally functions, rarely .","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the distance between patches. — atl_patch_dist","text":"","code":"atl_patch_dist(   data,   x1 = \"x_end\",   x2 = \"x_start\",   y1 = \"y_end\",   y2 = \"y_start\" )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the distance between patches. — atl_patch_dist","text":"data dataframe extending class data.frame, data.table. must contain two pairs coordinates, start end X Y coordinates feature. x1 first X coordinate longitude; inter-patch distances, last coordinate (x_end) patch \\(\\). x2 second X coordinate; inter-patch distances, first coordinate (x_start) subsequent patch \\(+ 1\\). y1 first Y coordinate latitude; inter-patch distances, last coordinate (y_end) patch \\(\\). y2 second Y coordinate; inter-patch distances, first coordinate (y_start) subsequent patch \\(+ 1\\).","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the distance between patches. — atl_patch_dist","text":"numeric vector length number patches, rows input dataframe. single patches, returns NA. vector elements NA, followed n-1 distances, n number rows.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the distance between patches. — atl_patch_dist","text":"Pratik R. Gupte","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the distance between patches. — atl_patch_dist","text":"","code":"# basic usage of atl_patch_dist if (FALSE) { # \\dontrun{ atl_patch_dist(   data = data,   x1 = \"x_end\", x2 = \"x_start\",   y1 = \"y_end\", y2 = \"y_start\" ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get residence patch data. — atl_patch_summary","title":"Get residence patch data. — atl_patch_summary","text":"function atl_patch_summary can used extract patch-specific summary data median coordinates, patch duration, distance travelled within patch, displacement within patch, patch area.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get residence patch data. — atl_patch_summary","text":"","code":"atl_patch_summary(patch_data, which_data = \"summary\", buffer_radius = 10)"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get residence patch data. — atl_patch_summary","text":"patch_data data.frame nested list column raw data underlying patch. Since data.frames support nested columns, actually data.table similar extension. which_data data return. May raw data underlying patch (which_data = \"points\"), spatial features (sf-MULTIPOLYGON) object patch covariates (which_data = \"spatial\"), data.table patch covariates without geometry column (which_data = \"summary\"). buffer_radius Spatial buffer radius (metres) around points requesting sf based polygons.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get residence patch data. — atl_patch_summary","text":"object type sf data.table depending data requested.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_summary.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get residence patch data. — atl_patch_summary","text":"Pratik R. Gupte","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_patch_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get residence patch data. — atl_patch_summary","text":"","code":"if (FALSE) { # \\dontrun{ patch_summary <- atl_patch_summary(   patch_data = patches,   which_data = \"summary\",   buffer_radius = 10 ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_add_track.html","id":null,"dir":"Reference","previous_headings":"","what":"Add tracks to plot from list. — atl_plot_add_track","title":"Add tracks to plot from list. — atl_plot_add_track","text":"function used plotting multiple individuals map list spatial data.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_add_track.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add tracks to plot from list. — atl_plot_add_track","text":"","code":"atl_plot_add_track(   d,   Pch = 19,   Cex = 0.25,   Lwd = 1,   col,   Type = \"o\",   endpoint = FALSE )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_add_track.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add tracks to plot from list. — atl_plot_add_track","text":"d spatial data frame. Pch type point plot localization Cex size point plot localization Lwd width line connect localizations col colour plotted localizations Type type graph make. instance, \"b\" points lines \"o\" simlar places points top line (gaps) endpoint Whether plot last localization individual magenta","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_add_track.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add tracks to plot from list. — atl_plot_add_track","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":null,"dir":"Reference","previous_headings":"","what":"Add residence patches to a plot. — atl_plot_rpatches","title":"Add residence patches to a plot. — atl_plot_rpatches","text":"Adds residence pattch data UTM 31N points polygons plot.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add residence patches to a plot. — atl_plot_rpatches","text":"","code":"atl_plot_rpatches(   data,   Pch = 21,   Cex = 0.25,   Lwd = 1,   Col = 1,   Bg = NULL,   Lines = TRUE )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add residence patches to a plot. — atl_plot_rpatches","text":"data Either sfc_Polygon dataframe tracking data Pch Corresponding graphical argument passed base plot function Cex Corresponding graphical argument passed base plot function Lwd Corresponding graphical argument passed base plot function Col Corresponding graphical argument passed base plot function Bg Corresponding graphical argument passed base plot function Lines Corresponding graphical argument passed base plot function","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add residence patches to a plot. — atl_plot_rpatches","text":"Nothing addition current plotting device.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_rpatches.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add residence patches to a plot. — atl_plot_rpatches","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot track for one individual on a simple background. — atl_plot_tag","title":"Plot track for one individual on a simple background. — atl_plot_tag","text":"function plots localization data one individual.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot track for one individual on a simple background. — atl_plot_tag","text":"","code":"atl_plot_tag(   data,   tag = NULL,   fullname = NULL,   color_by = \"time\",   towers = NULL,   h = 7,   w = 7 * (16/9),   buffer = 1,   Legend = \"topleft\",   Scalebar = 5,   cex_legend = 1 )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot track for one individual on a simple background. — atl_plot_tag","text":"data dataframe tracking data. Can include multiple tags, one tag selected plotting. tag four-digit tag number character plot. Defaults plotting first tag data. fullname specified plot saved path name (include extension). Defaults NULL plotting graphics window. color_by Either \"time\", \"sd\", \"nbs\", respectively used colour localization relative time (hours), variance localizations maximum VARX VARY, Number Base Stations (NBS) used calculate localization. Defaults \"time\". towers dataframe coordinates receiver stations (named X Y). h ? w ? buffer ? Legend Passed legend function sets location legend plot. Scalebar Length scalebar km. cex_legend size text legend.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot track for one individual on a simple background. — atl_plot_tag","text":"Returns nothing plot.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot track for one individual on a simple background. — atl_plot_tag","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot track for one individual on a OpenStreetMap satellite map. — atl_plot_tag_osm","title":"Plot track for one individual on a OpenStreetMap satellite map. — atl_plot_tag_osm","text":"function plots localization data one individual.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot track for one individual on a OpenStreetMap satellite map. — atl_plot_tag_osm","text":"","code":"atl_plot_tag_osm(   data,   tag = NULL,   mapID = map,   color_by = \"time\",   fullname = NULL,   ppi = 96,   towers = NULL,   Legend = \"topleft\",   Scalebar = 5,   cex_legend = 1 )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot track for one individual on a OpenStreetMap satellite map. — atl_plot_tag_osm","text":"data dataframe tracking data. Can include multiple tags, one tag selected plotting. tag four-digit tag number character plot. Defaults plotting first tag data. mapID map-object generated function OpenStreetMap::openmap(). color_by Either \"time\", \"SD\", \"NBS\", respectively used colour localization relative time (hours), variance localizations maximum VARX VARY, Number Base Stations (NBS) used calculate localization. Defaults \"time\". fullname specified plot saved path name (include extension). Defaults NULL plotting graphics window. ppi pixels per inch, used calculate dimensions plotting region mapID. Deafults 96. towers dataframe coordinates receiver stations (named X Y). Legend Passed legend function sets location legend plot. Scalebar Length scalebar km. cex_legend size text legend.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot track for one individual on a OpenStreetMap satellite map. — atl_plot_tag_osm","text":"Returns nothing plot.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_plot_tag_osm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot track for one individual on a OpenStreetMap satellite map. — atl_plot_tag_osm","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_res_patch_speed.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct residence patches from position data. — atl_res_patch_speed","title":"Construct residence patches from position data. — atl_res_patch_speed","text":"cleaned movement track one individual time can classified residence patches using function atl_res_patch_speed. function expects specific organisation data: least following columns, X, Y, time, corresponding coordinates, time POSIXct. atl_res_patch_speed requires three parameters: (1) maximum speed threshold localizations (called max_speed), (2) distance threshold clusters positions (called lim_spat_indep), (3) time interval clusters (called lim_time_indep). Clusters formed fewer minimum number positions can excluded. exclusion clusters positions can help removing bias due short stops, short stops also interest, can included reducing min_fixes argument. Position covariates speed may also summarised patch-wise passing covariate names  summary functions character vectors summary_variables summary_functions arguments, respectively.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_res_patch_speed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct residence patches from position data. — atl_res_patch_speed","text":"","code":"atl_res_patch_speed(   data,   max_speed = 3,   lim_spat_indep = 75,   lim_time_indep = 180,   min_fixes = 3,   min_duration = 120,   summary_variables = c(),   summary_functions = c() )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_res_patch_speed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct residence patches from position data. — atl_res_patch_speed","text":"data dataframe class extends data.frame one individual . dataframe must contain least two spatial coordinates, X Y, temporal coordinate, time. max_speed numeric value specifying maximum speed (m/s) two coordinates considered non-transitory lim_spat_indep numeric value distance metres spatial distance two patches considered independent. lim_time_indep numeric value time minutes time difference two patches considered independent. min_fixes minimum number fixes group spatially-proximate number ponts considered preliminary residence patch. min_duration minimum duration (seconds) classifying residence patches. summary_variables Optional variables patch-wise summary values required. passed character vector. summary_functions functions summarise summary variables; must return single value, median, mean etc. passed character vector.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_res_patch_speed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct residence patches from position data. — atl_res_patch_speed","text":"data.frame extension object. dataframe added column patch, patchdata, polygons, indicating patch identity, localization data used construct patch, polygons residence patches based lim_spat_indep. addition, columns patch summaries: nfixes, dist_in_patch, dist_bw_patch statistics based summary_variables summary_functions provided. summary variables.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_res_patch_speed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Construct residence patches from position data. — atl_res_patch_speed","text":"Pratik R. Gupte, Christine E. Beardsworth & Allert . Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_res_patch_speed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct residence patches from position data. — atl_res_patch_speed","text":"","code":"require(data.table) #> Loading required package: data.table require(ggplot2) #> Loading required package: ggplot2  # Load data d = atl_get_data_csv() |> data.table() #> Reading file: /home/runner/work/_temp/Library/tools4watlas/extdata/redknot_2707_WATLAS_exampledata.csv setnames(d, c(\"X\", \"Y\"), c(\"x\", \"y\"))  # Calculate residency patches rp = atl_res_patch_speed(   d, max_speed = 3, lim_spat_indep = 75, lim_time_indep = 180, min_fixes = 3,    min_duration = 120,   summary_functions = c(\"mean\", \"median\", \"sd\", \"min\", \"max\", \"first\", \"last\"))  # Extract data from all residency patches dr = rp[, rbindlist(lapply(patchdata, function(x) cbind(x))), by = patch]  # Merge with data d = merge(d, dr[, .(TAG, posID, patch)], by = c(\"TAG\", \"posID\"), all.x = TRUE)  # Plot data ggplot(d) +   geom_path(aes(x, y), alpha = 0.1) +   geom_point(aes(x, y, color = as.character(patch)), show.legend = FALSE) +   theme_bw()"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_simple_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances between successive localizations. — atl_simple_dist","title":"Calculate distances between successive localizations. — atl_simple_dist","text":"Gets euclidean distance consecutive localization coordinate reference system metres, .e., UTM systems.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_simple_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances between successive localizations. — atl_simple_dist","text":"","code":"atl_simple_dist(data, x = \"x\", y = \"y\", lag = 1)"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_simple_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances between successive localizations. — atl_simple_dist","text":"data dataframe object extending class data.frame, must contain two coordinate columns X Y coordinates. x column name data.frame object contains numeric X coordinate. y column name data.frame object contains numeric Y coordinate. lag lag (number localizations) calculate distance","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_simple_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances between successive localizations. — atl_simple_dist","text":"Returns vector distances consecutive points.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_simple_dist.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate distances between successive localizations. — atl_simple_dist","text":"Pratik R. Gupte & Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_t_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Make a colour transparant. — atl_t_col","title":"Make a colour transparant. — atl_t_col","text":"functionm make provided colour transparant.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_t_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make a colour transparant. — atl_t_col","text":"","code":"atl_t_col(color, percent = 50, name = NULL)"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_t_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make a colour transparant. — atl_t_col","text":"color color make transparant. percent percentage transparancy apply . name name argument passed rgb.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_t_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make a colour transparant. — atl_t_col","text":"transparant color returned.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_t_col.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make a colour transparant. — atl_t_col","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_thin_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Thin tracking data by resampling or aggregation. — atl_thin_data","title":"Thin tracking data by resampling or aggregation. — atl_thin_data","text":"Uniformly reduce data volumes either aggregation resampling (specified method argument) interval specified seconds using interval argument. options make two important assumptions: (1) timestamps named TIME', (2) columns except identity columns can averaged \\code{R}. subsample' option returns thinned dataset columns input data, aggregate' option drops column \\code{covxy}, since propagated averaged position. options handle column TIME' differently: subsample' returns actual timestamp (UNIX TIME) sample, aggregate' returns mean timestamp (also UNIX TIME). cases, extra column, time_agg, added uniform difference element corresponding user-defined thinning interval. `aggregate' option recognises errors named varx vary. columns present together function assumes measure error, drops columns. actually measure error, function simply returns averaged position covariates time interval. Grouping variables' names (animal identity) may passed character vector id_columns argument.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_thin_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thin tracking data by resampling or aggregation. — atl_thin_data","text":"","code":"atl_thin_data(   data,   interval = 60,   id_columns = NULL,   method = c(\"subsample\", \"aggregate\") )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_thin_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thin tracking data by resampling or aggregation. — atl_thin_data","text":"data Tracking data aggregate. Must columns X Y, numeric column named TIME. interval interval seconds aggregate. id_columns Column names grouping columns. method data thinned subsampling aggregation. resampling (method = \"subsample\"), first position group taken. aggregation (method = \"aggregate\"), group positions' mean taken.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_thin_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thin tracking data by resampling or aggregation. — atl_thin_data","text":"dataframe aggregated taking mean interval.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_thin_data.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Thin tracking data by resampling or aggregation. — atl_thin_data","text":"Pratik Gupte & Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_thin_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thin tracking data by resampling or aggregation. — atl_thin_data","text":"","code":"if (FALSE) { # \\dontrun{ thinned_data <- atl_thin_data(data,   interval = 60,   id_columns = c(\"animal_id\"),   method = \"aggregate\" ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_turning_angle.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the turning angle between points. — atl_turning_angle","title":"Get the turning angle between points. — atl_turning_angle","text":"Gets relative heading two track segments (three localizations) using law cosines. turning angle returned degrees. Users apply function one individual time, ideally splittng dataframe multiple individuals list dataframes.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_turning_angle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the turning angle between points. — atl_turning_angle","text":"","code":"atl_turning_angle(data, x = \"x\", y = \"y\", time = \"time\")"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_turning_angle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the turning angle between points. — atl_turning_angle","text":"data dataframe similar must columns specified x, y, time. x x coordinate. y y coordinate. time timestamp seconds since UNIX epoch.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_turning_angle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the turning angle between points. — atl_turning_angle","text":"vector turning angles degrees. Negative degrees indicate 'left' turns. two fewer angles number rows dataframe.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_turning_angle.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the turning angle between points. — atl_turning_angle","text":"Pratik R. Gupte & Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_turning_angle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the turning angle between points. — atl_turning_angle","text":"","code":"if (FALSE) { # \\dontrun{ data$angle <- atl_turning_angle(data,   x = \"x\", y = \"y\", time = \"time\" ) } # }"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_within_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect position intersections with a polygon. — atl_within_polygon","title":"Detect position intersections with a polygon. — atl_within_polygon","text":"Detects positions intersect sfc_*POLYGON. Tested single polygon objects.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_within_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect position intersections with a polygon. — atl_within_polygon","text":"","code":"atl_within_polygon(data, x = \"x\", y = \"y\", polygon)"},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_within_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect position intersections with a polygon. — atl_within_polygon","text":"data dataframe similar containg least X Y coordinates. x name X coordinate, assumed default \"x\". y Y coordinate , default \"y\". polygon sfc_*POLYGON object must defined CRS. polygon CRS assumed appropriate positions well, assigned coordinates determining intersection.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atl_within_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect position intersections with a polygon. — atl_within_polygon","text":"Row numbers positions inside polygon.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_boundingbox_for_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create bounding box in LatLong for downloading a map from OpenStreetMap. — atlas_make_boundingbox_for_osm","title":"Create bounding box in LatLong for downloading a map from OpenStreetMap. — atlas_make_boundingbox_for_osm","text":"Transforms bounding box obtained atl_get_spatial_bounds bounding box LongLat necesarry plotting OpenStreetMap::openmap() function atl_plot_tag.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_boundingbox_for_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create bounding box in LatLong for downloading a map from OpenStreetMap. — atlas_make_boundingbox_for_osm","text":"","code":"atlas_make_boundingbox_for_osm(   bbox,   buffer = 1000,   from_crs = sp::CRS(\"+init=epsg:32631\") )"},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_boundingbox_for_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create bounding box in LatLong for downloading a map from OpenStreetMap. — atlas_make_boundingbox_for_osm","text":"bbox matrix ranges X Y coordinates. first column contains range X, second column range Y. first row contains minimum second row maximum values. buffer buffer (meters) extending bbox. from_crs CRS() bbox.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_boundingbox_for_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create bounding box in LatLong for downloading a map from OpenStreetMap. — atlas_make_boundingbox_for_osm","text":"Provides data.frame can used openmap() first row provides upperleft corner second row lowerright corner extent, first column refers Y-coordinates second column X-coordinates.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_boundingbox_for_osm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create bounding box in LatLong for downloading a map from OpenStreetMap. — atlas_make_boundingbox_for_osm","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_spatialdataframe.html","id":null,"dir":"Reference","previous_headings":"","what":"Make X,Y data spatial. — atlas_make_spatialdataframe","title":"Make X,Y data spatial. — atlas_make_spatialdataframe","text":"function use library sp convert spatialdataframe.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_spatialdataframe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make X,Y data spatial. — atlas_make_spatialdataframe","text":"","code":"atlas_make_spatialdataframe(data, crs = sp::CRS(\"+init=epsg:32631\"))"},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_spatialdataframe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make X,Y data spatial. — atlas_make_spatialdataframe","text":"data dataframe tracking data. crs coordinate reference system (specified CRS()) X,Y coordinates. deafult UTM 31N: CRS(\"+init=epsg:32631\").","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_spatialdataframe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make X,Y data spatial. — atlas_make_spatialdataframe","text":"output Spatialpointsdataframe.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/atlas_make_spatialdataframe.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make X,Y data spatial. — atlas_make_spatialdataframe","text":"Allert Bijleveld","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/land.html","id":null,"dir":"Reference","previous_headings":"","what":"The Netherlands — land","title":"The Netherlands — land","text":"SpatialPolygonsDataFrame describing Netherlands' surface areas. Used background layer function atl_plot_tag.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/land.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Netherlands — land","text":"","code":"land"},{"path":"https://krietsch.github.io/tools4watlas/reference/land.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"The Netherlands — land","text":"SOORT land, water, sea (zee)","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/land.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"The Netherlands — land","text":"https://www.rijkswaterstaat.nl","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/mudflats.html","id":null,"dir":"Reference","previous_headings":"","what":"Intertidal Dutch Wadden Sea — mudflats","title":"Intertidal Dutch Wadden Sea — mudflats","text":"SpatialPolygonsDataFrame describing Wadden Sea's intertidal area. Used background layer function atl_plot_tag()","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/mudflats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intertidal Dutch Wadden Sea — mudflats","text":"","code":"mudflats"},{"path":"https://krietsch.github.io/tools4watlas/reference/mudflats.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Intertidal Dutch Wadden Sea — mudflats","text":"object class SpatialPolygonsDataFrame 175 rows 3 columns.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/mudflats.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Intertidal Dutch Wadden Sea — mudflats","text":"https://www.rijkswaterstaat.nl","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://krietsch.github.io/tools4watlas/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/plot_map_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a map downloaded with OpenStreetMap. — plot_map_osm","title":"Plot a map downloaded with OpenStreetMap. — plot_map_osm","text":"function used e.g. plotting multiple individuals.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/plot_map_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a map downloaded with OpenStreetMap. — plot_map_osm","text":"","code":"plot_map_osm(map, ppi = 96)"},{"path":"https://krietsch.github.io/tools4watlas/reference/plot_map_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a map downloaded with OpenStreetMap. — plot_map_osm","text":"map map loaded OpenStreetMap::openmap(). ppi pixels per inch, used calculate dimensions plotting region mapID. Deafults 96.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/plot_map_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a map downloaded with OpenStreetMap. — plot_map_osm","text":"Returns OSM background plot adding tracks.","code":""},{"path":"https://krietsch.github.io/tools4watlas/reference/plot_map_osm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a map downloaded with OpenStreetMap. — plot_map_osm","text":"Allert Bijleveld","code":""}]
